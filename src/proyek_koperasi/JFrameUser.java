/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyek_koperasi;

import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author rizki
 */
public class JFrameUser extends javax.swing.JFrame {
Connection con;
Statement stm,stat;
PreparedStatement ps;
ResultSet rs;
    /**
     * Creates new form JFrameUser
     */
    public JFrameUser() {
        initComponents();
        Koneksi();
        dataToTable();
        dataToCB();
    }
    
    private void Koneksi(){
         try {
            String url ="jdbc:mysql://localhost/db_koperasi";
            String user="root";
            String pass="";
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection(url,user,pass);
            stm = con.createStatement();
            System.out.println("koneksi berhasil;");
        } catch (ClassNotFoundException | SQLException e) {
            System.err.println("koneksi gagal" +e.getMessage());
        }
    }
    
    private void CekData() {
        String idUser = TFIdUser.getText().trim();

        if (idUser.isEmpty()) {
            JOptionPane.showMessageDialog(null, "ID tidak boleh kosong!");
            return;
        }

        String sqlcek = "SELECT username, password, nama_role FROM user JOIN role_user ON user.role_id = role_user.id_role WHERE id_user = ?";

        try (PreparedStatement pstmt = con.prepareStatement(sqlcek)) {
            pstmt.setString(1, idUser);
            ResultSet rscek = pstmt.executeQuery();

            if (rscek.next()) {
                TFname.setText(rscek.getString("username"));
                CBRoleId.setSelectedItem(rscek.getString("nama_role"));
                TFPassword.setText(rscek.getString("password"));
                TFCPassword.setText(rscek.getString("password"));
                TFname.requestFocus();
            } else {
                TFname.setText("");
                TFPassword.setText("");
                TFCPassword.setText("");
                TFIdUser.requestFocus();
                JOptionPane.showMessageDialog(null, "Data tidak ditemukan!");
            }
        } catch (SQLException e) {
            System.err.println("Error saat cek data: " + e.getMessage());
            JOptionPane.showMessageDialog(null, "Gagal cek data. Silakan hubungi administrator!");
        }
    }
    
    private void dataToCB() {
        String sql = "SELECT nama_role FROM role_user";

        try (PreparedStatement ps = con.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                CBRoleId.addItem(rs.getString("nama_role"));
            }

        } catch (SQLException e) {
            System.err.println("Gagal mendapatkan data: " + e.getMessage());
        } 
    }
    
    private void dataToTable() {
        DefaultTableModel model = (DefaultTableModel) TableUser.getModel();
        model.setColumnIdentifiers(new Object[]{"ID", "Nama User", "Password", "Hak Akses", "Tanggal Dibuat", "Tanggal Terubah"});
        String query = "SELECT user.id_user, user.username, user.password, role_user.nama_role, user.date_create, user.date_modify " +
                       "FROM user " + 
                       "JOIN role_user ON user.role_id = role_user.id_role"; 

        try (PreparedStatement ps = con.prepareStatement(query)) {
            ResultSet rs = ps.executeQuery();
            model.setRowCount(0);

            while (rs.next()) {
                model.addRow(new Object[]{
                    rs.getString("id_user"),
                    rs.getString("username"),
                    rs.getString("password"),
                    rs.getString("nama_role"), 
                    rs.getDate("date_create"),
                    rs.getDate("date_modify"),
                });
            }
            TableUser.getColumnModel().getColumn(1).setPreferredWidth(100);
            TableUser.getColumnModel().getColumn(3).setPreferredWidth(100);
            TableUser.getColumnModel().getColumn(4).setPreferredWidth(110);
            TableUser.getColumnModel().getColumn(5).setPreferredWidth(120);
        } catch (SQLException e) {
            System.err.println("Gagal menampilkan data: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        TFIdUser = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        TFname = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        TFPassword = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        TFCPassword = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        CBRoleId = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableUser = new javax.swing.JTable();
        btnSimpan = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnKeluar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Maintenance User");

        TFIdUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TFIdUserKeyPressed(evt);
            }
        });

        jLabel2.setText("ID User : ");

        jLabel3.setText("Username : ");

        jLabel4.setText("Password : ");

        jLabel5.setText("Confirm Password :");

        jLabel6.setText("Role ID :");

        CBRoleId.setToolTipText("");
        CBRoleId.setName(""); // NOI18N

        TableUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(TableUser);

        btnSimpan.setText("Simpan");
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        btnKeluar.setText("Keluar");
        btnKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKeluarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(186, 186, 186)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(14, 14, 14)
                                        .addComponent(TFIdUser, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(18, 18, 18)
                                        .addComponent(CBRoleId, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(TFCPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel4)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabel3)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(TFname, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addComponent(TFPassword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(btnSimpan)
                        .addGap(40, 40, 40)
                        .addComponent(btnHapus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnKeluar)
                        .addGap(29, 29, 29))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TFIdUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(TFname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TFPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel6)
                    .addComponent(CBRoleId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TFCPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSimpan)
                    .addComponent(btnHapus)
                    .addComponent(btnKeluar))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        CBRoleId.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String getRoleIdByName(String roleName) {
        String query = "SELECT id_role FROM role_user WHERE nama_role = ?";
        try (PreparedStatement ps = con.prepareStatement(query)) {
            ps.setString(1, roleName);
            try (ResultSet rs = ps.executeQuery()) {
                if (rs.next()) {
                    return rs.getString("id_role");
                }
            }
        } catch (SQLException e) {
            System.err.println("Error mencari role: " + e.getMessage());
        }
        return null; 
    }
    
    private void simpanDataUser(){
        String idUser = TFIdUser.getText();
        String username = TFname.getText();
        String password = TFPassword.getText();
        String confirmPassword = TFCPassword.getText();
        String selectedRoleName = (String) CBRoleId.getSelectedItem();

        if (idUser.isEmpty() || username.isEmpty() || password.isEmpty() || confirmPassword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Isi semua field dengan benar!");
            return;
        }

        if (!password.equals(confirmPassword)) {
            JOptionPane.showMessageDialog(this, "Password dan konfirmasi password tidak sama!");
            return;
        }

        String roleId = getRoleIdByName(selectedRoleName);
        if (roleId == null) {
            JOptionPane.showMessageDialog(this, "Role yang dipilih tidak valid!");
            return;
        }

        String query = "INSERT INTO user (id_user, username, password, role_id, date_create, date_modify) VALUES (?, ?, ?, ?, CURRENT_DATE, CURRENT_DATE)";

        try (PreparedStatement ps = con.prepareStatement(query)) {
            ps.setString(1, idUser);
            ps.setString(2, username);
            ps.setString(3, password);
            ps.setString(4, roleId);
            ps.executeUpdate();

            JOptionPane.showMessageDialog(this, "Data berhasil disimpan!");
            dataToTable();
            resetForm(); 

        } catch (SQLException e) {
            System.err.println("Error menyimpan data: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Gagal menyimpan data! Terjadi error.");
        }
    }
    
    private void ubahDataUser(){
        String idUser = TFIdUser.getText();
        String username = TFname.getText();
        String password = TFPassword.getText();
        String confirmPassword = TFCPassword.getText();
        String selectedRoleName = (String) CBRoleId.getSelectedItem();
        
        if (idUser.isEmpty() || username.isEmpty() || password.isEmpty() || confirmPassword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Isi semua field dengan benar!");
            return;
        }

        if (!password.equals(confirmPassword)) {
            JOptionPane.showMessageDialog(this, "Password dan konfirmasi password tidak sama!");
            return;
        }

        String roleId = getRoleIdByName(selectedRoleName);
        if (roleId == null) {
            JOptionPane.showMessageDialog(this, "Role yang dipilih tidak valid!");
            return;
        }
        
        String query = "UPDATE user SET username = ?, password = ?, role_id = ?, date_modify = CURRENT_DATE WHERE id_user = ?";

        try (PreparedStatement ps = con.prepareStatement(query)) {
            ps.setString(1, username);
            ps.setString(2, password);
            ps.setString(3, roleId);
            ps.setString(4, idUser);
            ps.executeUpdate();

            JOptionPane.showMessageDialog(this, "Data berhasil diubah!");
            dataToTable();
            resetForm(); 

        } catch (SQLException e) {
            System.err.println("Error ubah data: " + e.getMessage());
            JOptionPane.showMessageDialog(this, "Gagal ubah data! Terjadi error.");
        }
    }
    
    private boolean cekUserIdInDatabase() {
        String idUser = TFIdUser.getText();
        String query = "SELECT id_user FROM user WHERE id_user = ?";

        try (PreparedStatement ps = con.prepareStatement(query)) {
            ps.setString(1, idUser);
            ResultSet rs = ps.executeQuery();
            return rs.next();
        } catch (SQLException e) {
            System.err.println("Error cek ID user: " + e.getMessage());
        }
        return false;
    }

    private void resetForm() {
        TFIdUser.setText("");
        TFname.setText("");
        TFPassword.setText("");
        TFCPassword.setText("");
        CBRoleId.setSelectedIndex(0);
    }
    
    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        // TODO add your handling code here:
        if (cekUserIdInDatabase()) { 
            ubahDataUser();
        } else {
            simpanDataUser();
        }
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void TFIdUserKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TFIdUserKeyPressed
        // TODO add your handling code here:
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            CekData();
        }
    }//GEN-LAST:event_TFIdUserKeyPressed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        // TODO add your handling code here:
        int selectedRow = TableUser.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Pilih baris data yang ingin dihapus!");
            return;
        }

        String idUser = TableUser.getValueAt(selectedRow, 0).toString();

        int confirm = JOptionPane.showConfirmDialog(this, 
                          "Yakin ingin menghapus user dengan ID: " + idUser + "?", 
                          "Konfirmasi Penghapusan", 
                          JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {             
            String query = "DELETE FROM user WHERE id_user = ?";

            try (PreparedStatement ps = con.prepareStatement(query)) {
                ps.setString(1, idUser);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(this, "Data berhasil dihapus!");
                dataToTable();
                resetForm();
            } catch (SQLException e) {
                System.err.println("Error menghapus data: " + e.getMessage());
                JOptionPane.showMessageDialog(this, "Gagal menghapus data!");
            } 
        } 
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKeluarActionPerformed
        // TODO add your handling code here:
        dispose();
        new JFrame_MenuUtama().setVisible(true);
    }//GEN-LAST:event_btnKeluarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFrameUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFrameUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFrameUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFrameUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFrameUser().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CBRoleId;
    private javax.swing.JTextField TFCPassword;
    private javax.swing.JTextField TFIdUser;
    private javax.swing.JTextField TFPassword;
    private javax.swing.JTextField TFname;
    private javax.swing.JTable TableUser;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnKeluar;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
